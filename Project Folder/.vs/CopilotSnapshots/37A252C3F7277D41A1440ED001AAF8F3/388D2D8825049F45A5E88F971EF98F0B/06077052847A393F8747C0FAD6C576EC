#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <windows.h>
#include "distance_kernel.h"

double measure_time(void (*kernel)(float *, float *, float *, float *, float *, uint32_t), float *X1, float *X2, float *Y1, float *Y2, float *Z, uint32_t n) {
    LARGE_INTEGER freq, start, end;
    QueryPerformanceFrequency(&freq);
    QueryPerformanceCounter(&start);

    kernel(X1, X2, Y1, Y2, Z, n);

    QueryPerformanceCounter(&end);
    return (double)(end.QuadPart - start.QuadPart) * 1000.0 / freq.QuadPart;
}

int main() {
    uint32_t n = 1 << 20;

    float* X1 = (float*)malloc(sizeof(float) * n);
    float* X2 = (float*)malloc(sizeof(float) * n);
    float* Y1 = (float*)malloc(sizeof(float) * n);
    float* Y2 = (float*)malloc(sizeof(float) * n);
    float* Z_c = (float*)malloc(sizeof(float) * n);
    float* Z_asm = (float*)malloc(sizeof(float) * n);

    if (!X1 || !X2 || !Y1 || !Y2 || !Z_c || !Z_asm) {
        printf("Memory allocation failed\n");
        return 1;
    }

    for (uint32_t i = 0; i < n; i++) {
        X1[i] = (float)rand() / RAND_MAX * 100.0f;
        X2[i] = (float)rand() / RAND_MAX * 100.0f;
        Y1[i] = (float)rand() / RAND_MAX * 100.0f;
        Y2[i] = (float)rand() / RAND_MAX * 100.0f;
    }

    double time_c = measure_time(distance_kernel_c, X1, X2, Y1, Y2, Z_c, n);
    double time_asm = measure_time(distance_kernel_asm, X1, X2, Y1, Y2, Z_asm, n);

    printf("\nFirst 10 results:\n");
    for (int i = 0; i < 10; i++) {
        const char* result;
        if (fabsf(Z_c[i] - Z_asm[i]) < 1e-5) {
            result = "OK";
        } else {
            result = "MISMATCH";
        }
        printf("Z_c[%d] = %f\tZ_asm[%d] = %f\t%s\n", i, Z_c[i], i, Z_asm[i], result);
    }

    printf("C kernel time: %f ms\n", time_c);
    printf("ASM kernel time: %f ms\n", time_asm);

    free(X1); free(X2); free(Y1); free(Y2);
    free(Z_c); free(Z_asm);
    return 0;
}
