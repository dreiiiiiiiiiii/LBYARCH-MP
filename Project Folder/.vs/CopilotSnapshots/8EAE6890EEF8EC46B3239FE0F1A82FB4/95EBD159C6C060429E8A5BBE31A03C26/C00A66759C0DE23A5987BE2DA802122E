; distance_kernel.asm

.code
distance_kernel_asm PROC
    ; RCX = X1
    ; RDX = X2
    ; R8  = Y1
    ; R9  = Y2
    ; [RSP+40] = Z
    ; [RSP+48] = n

    push rbp
    mov rbp, rsp
    sub rsp, 32                ; shadow space

    mov r10, QWORD PTR [rsp + 40]  ; r10 = Z
    mov r11d, DWORD PTR [rsp + 48] ; r11d = n

    xor ecx, ecx              ; ecx = loop counter (i = 0)

loop_start:
    cmp ecx, r11d
    jge loop_end

    mov r12d, ecx
    shl r12d, 2             ; r12d = ecx * 4

    movss xmm0, DWORD PTR [rcx + r12d]   ; X1[i]
    movss xmm1, DWORD PTR [rdx + r12d]   ; X2[i]
    subss xmm1, xmm0                    ; xmm1 = X2[i] - X1[i]
    mulss xmm1, xmm1                    ; xmm1 = (X2[i] - X1[i])^2

    movss xmm2, DWORD PTR [r8  + r12d]  ; Y1[i]
    movss xmm3, DWORD PTR [r9  + r12d]  ; Y2[i]
    subss xmm3, xmm2                    ; xmm3 = Y2[i] - Y1[i]
    mulss xmm3, xmm3                    ; xmm3 = (Y2[i] - Y1[i])^2

    addss xmm1, xmm3                    ; add squares
    sqrtss xmm1, xmm1                   ; sqrt

    movss DWORD PTR [r10 + r12d], xmm1  ; Z[i]

    inc ecx
    jmp loop_start

loop_end:
    add rsp, 32
    pop rbp
    ret

distance_kernel_asm ENDP
END
